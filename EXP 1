*1. A simple program to print the IP address of the system 
import java.net.*;
import java.io.*;
class ipclient{
public static void main(String args[]) { 
try { 
InetAddress ia=InetAddress.getLocalHost();
System.out.println("The client system address is: "+ia); }
catch(IOException e) { 
System.out.println("The exception is: "+e); } } }

*1b. Printing Client Address at Server Side server

import java.io.*;
 import java.net.*;
class Sip { 
public static void main(String args[]) { 
ServerSocket ss; 
Socket s; 
DataInputStream dis; 
String ip; 
try { 
ss=new ServerSocket(8020); 
while(true) { 
s=ss.accept();
 dis=new DataInputStream(s.getInputStream());
 ip=dis.readLine();
 System.out.println("Ip address of the client system is"+ip); } } 
catch(IOException e) {
 System.out.println("The exception is: "+e); } } }
Clients 
 import java.io.*;
 import java.net.*;
 class Cip { public static void main(String args[]) {
 Socket soc;
 PrintStream ps;
 try { 
InetAddress ia=InetAddress.getLocalHost();
 soc=new Socket(ia,8020);
 ps=new PrintStream(soc.getOutputStream());
 ps.println(ia); }
 catch(IOException e) { 
System.out.println("The exception is: "+e); } } }

*2. CREATION OF DATE AND TIME SERVER.
SERVER PROGRAM 
import java.io.*; 
import java.net.*;
 import java.util.*; 
class dateserver { 
public static void main(String args[]) { 
ServerSocket ss; 
Socket s; 
PrintStream ps; 
DataInputStream dis; 
String inet; 
try { 
ss=new ServerSocket(8020); 
while(true) { 
s=ss.accept(); 
ps=new PrintStream(s.getOutputStream()); 
Date d=new Date(); 
ps.println(d); 
ps.close(); } } 
catch(IOException e) { 
System.out.println("The exception is: "+e); } } }
CLIENT PROGRAM
 import java.io.*; 
import java.net.*; 
class dateclient { 
public static void main(String args[]) { 
Socket soc; 
DataInputStream dis; 
String sdate; 
PrintStream ps; 
try { InetAddress ia=InetAddress.getLocalHost(); 
soc=new Socket(ia,8020); 
dis=new DataInputStream(soc.getInputStream()); 
sdate=dis.readLine(); 
System.out.println("The data in the server is: "+sdate); }
 catch(IOException e) { 
System.out.println("The exception is: "+e); } } };

*3.Creation of UDP server
server
import java.net.*; 
import java.io.*; 
public class udpserver { 
public static int client=789; 
public static int server=790; 
public static void main(String arg[]) throws IOException { 
String s; 
InetAddress id=InetAddress.getLocalHost(); 
BufferedReader dis=new BufferedReader(new InputStreamReader(System.in)); 
DatagramSocket ds=new DatagramSocket(server); 
byte b[]=new byte[1024]; 
System.out.println("Server Side.... Sending...."); 
System.out.println("\n"+id); 
while(true) { 
s=dis.readLine(); 
if(s.equals("end")) { 
b=s.getBytes(); 
DatagramPacket dp=new DatagramPacket(b,s.length(),id,client); 
ds.send(dp); break; } 
else { 
b=s.getBytes(); 
DatagramPacket dp=new DatagramPacket(b,s.length(),id,client); 
ds.send(dp); } } } }
client
import java.net.*; 
import java.io.*; 
public class udpclient { 
public static int client=789; 
public static void main(String args[]) throws IOException { 
DatagramSocket ds=new DatagramSocket(client); 
byte b[]=new byte[1024]; 
System.out.println("client....receiving...."); 
while(true) { 
DatagramPacket dp=new DatagramPacket(b,b.length); 
ds.receive(dp); 
String s=new String(dp.getData(),0,dp.getLength()); 
if(s.equals("end")) break;
else 
System.out.println(s); } } }

*4. TCP SOCKET-ECHO Client & Server
Server
import java.io.*; 
import java.net.*; 
class echos {
public static void main(String args[]) throws Exception { 
String echoin; 
ServerSocket svrsoc; 
Socket soc; 
BufferedReader br; try { 
svrsoc = new ServerSocket(2000); 
soc = svrsoc.accept(); 
br = new BufferedReader (new InputStreamReader(soc.getInputStream())); 
PrintStream ps = new PrintStream(soc.getOutputStream()); 
System.out.println("Connected for echo:"); 
while((echoin=br.readLine())!=null) { 
if(echoin.equals("end")) { 
System.out.println("Client disconnected"); 
br.close(); 
break; } 
else ps.println(echoin); } } 
catch(UnknownHostException e) { 
System.out.println(e.toString()); } 
catch(IOException ioe) { 
System.out.println(ioe); } } }
Client:
import java.io.*; 
import java.net.*; 
class echoc { 
public static void main(String args[]) throws Exception { 
String sockin; try { 
Socket csock = new Socket(InetAddress.getLocalHost(),2000); 
BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 
BufferedReader br_sock = new BufferedReader(new 
InputStreamReader(csock.getInputStream())); PrintStream ps = new 
PrintStream(csock.getOutputStream()); 
System.out.println("Start echoing... type 'end' to terminate"); 
while((sockin=br.readLine())!=null) { 
ps.println(sockin); 
if(sockin.equals("end")) break; 
else System.out.println("echoed from server:"+br_sock.readLine()); } } 
catch(UnknownHostException e) { 
System.out.println(e.toString()); } 
catch(IOException ioe) { System.out.println(ioe); } } } 

*4b. Creation of a Simple Chat Program
Client program: import java.io.*; 
import java.net.*; 
public class chatclient1 { 
public static void main(String args[]) throws Exception { 
Socket sk=new Socket(InetAddress.getLocalHost(),2000); 
BufferedReader sin=new BufferedReader(new InputStreamReader(sk.getInputStream())); 
PrintStream sout=new PrintStream(sk.getOutputStream()); 
BufferedReader stdin=new BufferedReader(new InputStreamReader(System.in)); 
String s; 
while ( true ) { 
System.out.print("Client : "); 
s=stdin.readLine(); 
sout.println(s); 
s=sin.readLine(); 
System.out.print("Server : "+s+"\n"); 
if ( s.equalsIgnoreCase("BYE") ) break; } 
sk.close();
sin.close(); 
sout.close(); 
stdin.close(); } }
Server program import java.net.*; 
import java.io.*; 
public class chatserver1 { 
public static void main(String args[]) throws Exception { 
ServerSocket ss=new ServerSocket(2000); Socket sk=ss.accept(); 
BufferedReader cin=new BufferedReader(new InputStreamReader(sk.getInputStream())); 
PrintStream cout=new PrintStream(sk.getOutputStream()); 
BufferedReader stdin=new BufferedReader(new InputStreamReader(System.in)); 
String s; 
while ( true ) { s=cin.readLine(); 
if (s.equalsIgnoreCase("END")) { 
cout.println("BYE"); break; } 
System. out.print("Client : "+s+"\n"); 
System.out.print("Server : "); 
s=stdin.readLine(); 
cout.println(s); } 
ss.close(); 
sk.close(); 
cin.close(); 
cout.close(); 
stdin.close(); } }

*4c.Implement FTP using TCP
Program – Client : import java.net.*; 
import java.io.*; 
public class FTPClient {
 public static void main( String args[ ] ) throws Exception { 
Socket s = new Socket(InetAddress.getLocalHost(), 4000);
System.out.println("Enter the file name"); 
BufferedReader keyRead = new BufferedReader(new InputStreamReader(System.in)); 
String fname = keyRead.readLine();
OutputStream ostream = s.getOutputStream( ); 
PrintWriter pwrite = new PrintWriter(ostream, true); 
pwrite.println(fname);
InputStream istream = s.getInputStream(); 
BufferedReader socketRead = new BufferedReader(new InputStreamReader(istream)); 
String str; 
while((str = socketRead.readLine()) != null) { 
System.out.println(str); } 
pwrite.close(); 
socketRead.close(); 
keyRead.close(); } }
Program – Server : import java.io.*; 
import java.net.*; 
public class FTPServer { 
public static void main(String args[]) throws Exception {
ServerSocket ss = new ServerSocket(4000); 
System.out.println("Server ready for connection"); 
Socket s = ss.accept();
System.out.println("Connection is successful and wating for chatting");
InputStream istream = s.getInputStream( ); 
BufferedReader fileRead=new BufferedReader(new InputStreamReader(istream)); 
String fname = fileRead.readLine( );
BufferedReader contentRead = new BufferedReader(new FileReader(fname) );
OutputStream ostream = s.getOutputStream( ); 
PrintWriter pwrite = new PrintWriter(ostream, true); 
String str; 
while((str = contentRead.readLine()) != null){ 
pwrite.println(str); }
s.close(); ss.close();
pwrite.close(); fileRead.close(); contentRead.close(); } }

*5 DAEMON PROGRAM
public class DaemonThread extends Thread { 
public DaemonThread(String name){ 
super(name); } 
public void run() {
if(Thread.currentThread().isDaemon()) {
System.out.println(getName() + " is Daemon thread"); }
else {
System.out.println(getName() + " is User thread"); }}
public static void main(String[] args) { 
DaemonThread t1 = new DaemonThread("t1"); 
DaemonThread t2 = new DaemonThread("t2"); 
DaemonThread t3 = new DaemonThread("t3");
t1.setDaemon(true);
t1.start(); 
t2.start(); 
t3.setDaemon(true); 
t3.start();}}

*6.Implement Sliding Window Protocol:
Server: import java.net.*; 
import java.io.*; 
import java.rmi.*; 
public class sender { public static void main(String a[])throws Exception { 
ServerSocket ser=new ServerSocket(8069); 
Socket s=ser.accept(); 
DataInputStream in=new DataInputStream(System.in); 
DataInputStream in1=new DataInputStream(s.getInputStream()); 
String sbuff[]=new String[8]; 
PrintStream p; 
int sptr=0,sws=8,nf,ano,i; String ch; 
do { p=new PrintStream(s.getOutputStream()); 
System.out.print("Enter the no. of frames : "); 
nf=Integer.parseInt(in.readLine()); 
p.println(nf); if(nf<=sws-1) { 
System.out.println("Enter "+nf+" Messages to be send\n"); 
for(i=1;i<=nf;i++) { 
sbuff[sptr]=in.readLine(); 
p.println(sbuff[sptr]); 
sptr=++sptr%8; } 
sws-=nf; 
System.out.print("Acknowledgment received"); 
ano=Integer.parseInt(in1.readLine()); 
System.out.println(" for "+ano+" frames"); 
sws+=nf; } 
else { System.out.println("The no. of frames exceeds window size"); 
break;}
 System.out.print("\nDo you wants to send some more frames : "); 
ch=in.readLine();
 p.println(ch); } 
while(ch.equals("yes"));
s.close(); } }
Receiver Side Program: import java.net.*; 
import java.io.*; 
class slidreceiver { 
public static void main(String a[])throws Exception { 
Socket s=new Socket(InetAddress.getLocalHost(),8069); 
DataInputStream in=new DataInputStream(s.getInputStream()); 
PrintStream p=new PrintStream(s.getOutputStream()); 
int i=0,rptr=-1,nf,rws=8; String rbuf[]=new String[8]; 
String ch; 
System.out.println(); 
do { nf=Integer.parseInt(in.readLine()); 
if(nf<=rws-1) { 
for(i=1;i<=nf;i++) { 
rptr=++rptr%8; 
rbuf[rptr]=in.readLine(); 
System.out.println("The received Frame " +rptr+" is : "+rbuf[rptr]); } 
rws-=nf; System.out.println("\nAcknowledgment sent\n"); 
p.println(rptr+1);
 rws+=nf; } 
else 
break; 
ch=in.readLine(); } 
while(ch.equals("yes")); } 

*7.ARP PROTOCOL
import java.net.InetAddress; 
import java.net.NetworkInterface; 
import java.net.SocketException; 
import java.net.UnknownHostException; 
import java.util.Scanner; 
public class MacAddress { 
public static void main(String[] args) { 
try { Scanner console = new Scanner(System.in); 
System.out.println("Enter System Name: "); 
String ipaddr = console.nextLine(); 
InetAddress address = InetAddress.getByName(ipaddr); 
System.out.println("address = "+address); 
NetworkInterface ni = NetworkInterface.getByInetAddress(address); 
if (ni!=null) { 
byte[] mac = ni.getHardwareAddress();
if (mac != null) { System.out.print("MAC Address : "); 
for (int i=0; i < mac.length; i++) { 
System.out.format("%02X%s", mac[i], (i < mac.length - 1) ? "-" :""); } } 
else { 
System.out.println("Address doesn't exist or is not accessible/"); } } 
else { 
System.out.println("Network Interface for the specified address is not found"); } } 
catch(UnknownHostException | SocketException e) { } } }

*8A. Traceroute command
import java.io.BufferedReader; 
import java.io.InputStreamReader;
public class traceroutecmd { 
public static void runSystemCommand(String command) { 
try { Process p = Runtime.getRuntime().exec(command); 
BufferedReader inputStream = new BufferedReader( new 
InputStreamReader(p.getInputStream())); String s = ""; 
while ((s = inputStream.readLine()) != null) System.out.println(s); } 
catch (Exception e) { } } 
public static void main(String[] args) {
 // String ip = "www.google.co.in"; // String ip = "127.0.0.1"; 
String ip = "www.drranurekha.com"; 
runSystemCommand("tracert " + ip); } }

*8B. Ping command
import java.io.*;
public class ping1 { 
public static void runSystemCommand(String Command) { 
try{ 
Process p=Runtime.getRuntime().exec(Command);
BufferedReader InputStream=new BufferedReader(new 
InputStreamReader(p.getInputStream())); String s="vvv"; 
while((s=InputStream.readLine())!=null) { 
System.out.println(s); } } 
catch(Exception e) { 
e.printStackTrace(); } } 
public static void main(String[]args) { 
String Ip="localhost"; runSystemCommand("ping " +Ip); 
java.util.Date date=new java.util.Date(); 
System.out.println(date); } }

*9.Program to implement HTTP protocol
import java.io.*; 
import java.net.*; 
public class myhttp { 
public static void main(String args[])throws IOException { 
URL url=new URL("https://google.com/"); 
URLConnection conn=url.openConnection(); 
conn.connect(); 
InputStreamReader content= new InputStreamReader(conn.getInputStream()); 
FileWriter f=new FileWriter ("abc.html"); 
for(int i=0;i!=-1;i= content.read()) { 
f.write((char) i); } } }




